import {
  Document,
  Packer,
  Paragraph,
  TextRun,
  TabStopType,
  TabStopPosition,
  HeadingLevel,
  AlignmentType,
  Header,
  Footer,
  PageNumber,
  IRunOptions, // Added for clarity, though not strictly necessary for the fix
} from 'docx';

// Helper function to create a section header
const createSectionHeader = (text: string) => {
  return new Paragraph({
      text,
      heading: HeadingLevel.HEADING_2,
      spacing: { before: 300, after: 150 },
  });
};

// Helper function to create a key-value pair (Corrected)
const createKeyValue = (key: string, value: any, isMultiLine: boolean = false) => {
  if (value === undefined || value === null || String(value).trim() === '') return null;

  const valueRuns: TextRun[] = [];
  // Ensure all TextRun options for value parts include the size property
  const textRunOptions: Partial<IRunOptions> = { size: 24 };

  if (isMultiLine && typeof value === 'string') {
      const lines = value.split('\n');
      lines.forEach((line, index) => {
          valueRuns.push(new TextRun({ ...textRunOptions, text: line }));
          if (index < lines.length - 1) {
              // Size for a break run is likely ignored by Word but harmless to include for consistency
              valueRuns.push(new TextRun({ ...textRunOptions, break: 1 }));
          }
      });
  } else {
      valueRuns.push(new TextRun({ ...textRunOptions, text: String(value) }));
  }

  return new Paragraph({
      children: [
          new TextRun({ text: `${key}: `, bold: true, size: 24 }), // 12pt
          ...valueRuns, // valueRuns now contain TextRuns already configured with size
      ],
      spacing: { after: 100 },
  });
};


// Helper for a simple paragraph of text
const createTextParagraph = (text: string | undefined | null) => {
  if (!text || text.trim() === '') return null;
  const children: TextRun[] = [];
  const lines = text.split('\n');
  lines.forEach((line, index) => {
      children.push(new TextRun(line));
      if (index < lines.length - 1) {
          children.push(new TextRun({ break: 1 }));
      }
  });
  return new Paragraph({ children, spacing: { after: 150 } });
};

// Helper function to create signature block
const createSignatureBlock = (signerTitle: string = "Authorized Signature", partyName?: string) => {
  const blocks = [
      new Paragraph({ text: "", spacing: { before: 400, after: 100 } }), // Space before signature line
      new Paragraph({ children: [new TextRun("_____________________________")] }),
      new Paragraph({ text: partyName ? `${signerTitle} for ${partyName}` : signerTitle, spacing: { before: 50, after: 50 } }),
      new Paragraph({ children: [new TextRun("Name (Printed): ________________")] , spacing: { after: 100 }}),
      new Paragraph({ children: [new TextRun("Date: _________________________")] , spacing: { after: 200 }}),
  ];
  return blocks;
};


// Helper function to create document with proper page setup
const createDocumentWithSetup = (children: Paragraph[], title: string = "Legal Document", companyNameForFooter: string = "[Company Name]") => {
  return new Document({
      creator: "LegallyUp Document Generator",
      title: title,
      description: "Generated by LegallyUp",
      styles: {
          paragraphStyles: [
              {
                  id: "Normal", name: "Normal", basedOn: "Normal", next: "Normal", quickFormat: true,
                  run: { size: 24, font: "Times New Roman" }, paragraph: { spacing: { line: 276, before: 0, after: 100 } },
              },
              {
                  id: "FooterStyle", name: "Footer Style", basedOn: "Normal",
                  run: { size: 20, font: "Times New Roman", italics: true }, paragraph: { alignment: AlignmentType.CENTER },
              },
              {
                  id: "HeaderStyle", name: "Header Style", basedOn: "Normal",
                  run: { size: 20, font: "Times New Roman", italics: true },
              },
              // Consider adding explicit styles for Heading1, Heading2, Heading3 if you want more control
              // than Word's defaults or the inline properties. For example:
              // {
              //   id: "Heading1", name: "Heading 1", basedOn: "Normal", next: "Normal", quickFormat: true,
              //   run: { size: 32, bold: true, font: "Times New Roman" }, // e.g., 16pt bold
              //   paragraph: { spacing: { before: 480, after: 240 }, alignment: AlignmentType.CENTER },
              // },
          ],
      },
      sections: [{
          properties: {
              page: {
                  margin: { top: 1440, right: 1440, bottom: 1440, left: 1440 }, // 1 inch margins
                  size: { width: 12240, height: 15840 }, // Letter
              },
          },
          headers: {
              default: new Header({
                  children: [new Paragraph({
                      children: [
                          new TextRun(title),
                          new TextRun({ text: "\t" }), new TextRun({ text: "\t" }), new TextRun({ text: "\t" }),
                          new TextRun({ text: "\t" }), new TextRun({ text: "\t" }), new TextRun({ text: "\t" }),
                          new TextRun({ text: "\t" }), new TextRun({ text: "\t" }),
                          new TextRun({ children: [PageNumber.CURRENT] })
                      ],
                      tabStops: [{ type: TabStopType.RIGHT, position: TabStopPosition.MAX }],
                      style: "HeaderStyle"
                  }),
                  ],
              }),
          },
          footers: {
              default: new Footer({
                  children: [new Paragraph({
                      children: [
                          new TextRun(`Â© ${new Date().getFullYear()} ${companyNameForFooter}. All rights reserved.`),
                          new TextRun({ text: "\t" }), new TextRun({ text: "\t" }), new TextRun({ text: "\t" }),
                          new TextRun({ text: "\t" }), new TextRun({ text: "\t" }), new TextRun({ text: "\t" }),
                          new TextRun({ text: "\t" }),
                          new TextRun({ children: [PageNumber.CURRENT, " of ", PageNumber.TOTAL_PAGES] })
                      ],
                      tabStops: [{ type: TabStopType.RIGHT, position: TabStopPosition.MAX }],
                      style: "FooterStyle"
                  }),
                  ],
              }),
          },
          children,
      }],
  });
};


// --- Document Creator Functions (Privacy, NDA, EULA placeholders) ---
// Assuming these are more complete in your actual code.
// The provided structure for adding signatures and calling createDocumentWithSetup is sound.

const createPrivacyPolicyDoc = (data: any): Document => {
  // Example: Replace with actual content generation
  const childrenContent: (Paragraph | null)[] = [
    new Paragraph({ text: `PRIVACY POLICY for ${data.companyName || "[Company Name]"}`, heading: HeadingLevel.HEADING_1, alignment: AlignmentType.CENTER, spacing: { after: 300 }}),
    createKeyValue('Effective Date', data.effectiveDate),
    createSectionHeader('1. Introduction'),
    createTextParagraph(data.introductionText),
    // ... more sections and content based on 'data'
  ];
  const children = childrenContent.filter(el => el !== null) as Paragraph[];
  children.push(...createSignatureBlock("Authorized Representative", data.companyName));
  return createDocumentWithSetup(children, `Privacy Policy - ${data.companyName || "Company"}`, data.companyName);
};

const createNdaDoc = (data: any): Document => {
  // Example: Replace with actual content generation
  const childrenContent: (Paragraph | null)[] = [
      new Paragraph({ text: `NON-DISCLOSURE AGREEMENT`, heading: HeadingLevel.HEADING_1, alignment: AlignmentType.CENTER, spacing: { after: 300 }}),
      createKeyValue('Effective Date', data.effectiveDate),
      createKeyValue('Disclosing Party', data.disclosingPartyName),
      createKeyValue('Receiving Party', data.receivingPartyName),
      // ... more sections and content based on 'data'
  ];
  const children = childrenContent.filter(el => el !== null) as Paragraph[];
  children.push(new Paragraph({text: "", spacing: {before: 400}})); // Extra space
  children.push(...createSignatureBlock("Disclosing Party", data.disclosingPartyName));
  children.push(...createSignatureBlock("Receiving Party", data.receivingPartyName));
  return createDocumentWithSetup(children, `NDA - ${data.disclosingPartyName || "Disclosing Party"}`, data.disclosingPartyName || data.companyName);
};

const createEulaDoc = (data: any): Document => {
  // Example: Replace with actual content generation
  const childrenContent: (Paragraph | null)[] = [
      new Paragraph({ text: `END USER LICENSE AGREEMENT for ${data.productName || "[Software Product]"}`, heading: HeadingLevel.HEADING_1, alignment: AlignmentType.CENTER, spacing: { after: 300 }}),
      createKeyValue('Licensor', data.licensorCompanyName),
      createKeyValue('Effective Date', data.effectiveDate),
      // ... more sections and content based on 'data'
  ];
  const children = childrenContent.filter(el => el !== null) as Paragraph[];
  children.push(new Paragraph({text: "\n\nLICENSEE ACKNOWLEDGEMENT:", heading: HeadingLevel.HEADING_3, spacing: {before: 400}}));
  const para = createTextParagraph("By installing, copying, or otherwise using the Software, Licensee acknowledges that they have read this EULA, understand it, and agree to be bound by its terms and conditions.");
  if (para) children.push(para);
  // EULAs often don't have a traditional signature block like a contract, agreement is by use.
  // If you need one: children.push(...createSignatureBlock("Licensee (if applicable)"));
  return createDocumentWithSetup(children, `EULA - ${data.productName || "Software"}`, data.licensorCompanyName);
};


// --- NEW Document Creator Functions ---

const createCookiesPolicyDoc = (data: any): Document => {
  const children = [
      new Paragraph({ text: `COOKIES POLICY for ${data.companyName || "[Company Name]"}`, heading: HeadingLevel.HEADING_1, alignment: AlignmentType.CENTER, spacing: { after: 300 }}),
      createKeyValue('Last Updated', data.lastUpdated),
      createKeyValue('Website URL', data.websiteUrl),
      new Paragraph({text: ""}),

      createSectionHeader('1. Introduction'),
      createTextParagraph(`This Cookies Policy explains how ${data.companyName || "[Company Name]"} ("we", "us", or "our") uses cookies and similar tracking technologies on our website.`),

      createSectionHeader('2. What Are Cookies?'),
      createTextParagraph("Cookies are small text files that are stored on your device (computer, tablet, mobile) when you visit certain websites. They are widely used to make websites work, or work more efficiently, as well as to provide information to the owners of the site."),

      createSectionHeader('3. How We Use Cookies'),
      createKeyValue('Do we use cookies?', data.usesCookies === 'yes' ? 'Yes' : 'No'),
      data.usesCookies === 'yes' ? createTextParagraph('We use cookies for various purposes, including:') : null,
      data.usesCookies === 'yes' ? createTextParagraph(data.typesOfCookiesUsed) : null,

      createSectionHeader('4. Types of Cookies We Use'),
      data.usesCookies === 'yes' ? createTextParagraph(data.cookieDetailsList) : createTextParagraph("As we do not currently use cookies, this section is not applicable."),

      createSectionHeader('5. Managing Your Cookie Preferences'),
      data.usesCookies === 'yes' ? createTextParagraph(data.cookiePolicyManagement) : createTextParagraph("As we do not currently use cookies, there are no cookie preferences to manage for our site."),

      createSectionHeader('6. Changes to This Cookies Policy'),
      createTextParagraph("We may update this Cookies Policy from time to time. We will notify you of any changes by posting the new Cookies Policy on this page."),

      createSectionHeader('7. Contact Us'),
      createTextParagraph(`If you have any questions about this Cookies Policy, please contact us:`),
      createKeyValue('Contact Person/Department', data.contactPersonPolicy),
      createKeyValue('Email', data.contactEmail),
      data.contactPhone ? createKeyValue('Phone', data.contactPhone) : null,
      createKeyValue('Link to Privacy Policy', data.linkToPrivacyPolicy),

  ].filter(el => el !== null) as Paragraph[];
  return createDocumentWithSetup(children, `Cookies Policy - ${data.companyName || "Company"}`, data.companyName);
};

const createRefundPolicyDoc = (data: any): Document => {
  const children = [
      new Paragraph({ text: `REFUND POLICY for ${data.companyName || "[Company Name]"}`, heading: HeadingLevel.HEADING_1, alignment: AlignmentType.CENTER, spacing: { after: 300 }}),
      createKeyValue('Policy Effective Date', data.policyEffectiveDate),
      createKeyValue('Website', data.websiteUrl),
      new Paragraph({text: ""}),

      createSectionHeader('1. Policy Scope'),
      createTextParagraph(data.policyScope),

      createSectionHeader('2. Refund Eligibility'),
      createTextParagraph(data.refundEligibilityConditions),

      createSectionHeader('3. How to Request a Refund'),
      createTextParagraph(data.howToRequestRefund),
      createKeyValue('Contact for Refunds', data.contactEmail),

      createSectionHeader('4. Refund Processing'),
      createKeyValue('Processing Timeframe', data.refundProcessingTimeframe),

      createSectionHeader('5. Non-Refundable Items/Services'),
      createTextParagraph(data.nonRefundableItems || "Unless otherwise specified, all items/services are subject to this refund policy."),

      createSectionHeader('6. Exchanges'),
      createKeyValue('Do we offer exchanges?', data.hasExchangePolicy === 'yes' ? 'Yes' : 'No'),
      data.hasExchangePolicy === 'yes' ? createTextParagraph(data.exchangePolicyDetails) : null,

      createSectionHeader('7. Return Shipping'),
      createKeyValue('Responsibility for Return Shipping Costs', data.returnShippingResponsibility ? data.returnShippingResponsibility.replace(/_/g, ' ') : "Not Applicable"),
      data.returnShippingInstructions ? createTextParagraph(data.returnShippingInstructions) : null,

      createSectionHeader('8. Contact Information'),
      createTextParagraph(`For any questions regarding this Refund Policy, please contact us at ${data.contactEmail || "[Contact Email]"}.`),

  ].filter(el => el !== null) as Paragraph[];
  return createDocumentWithSetup(children, `Refund Policy - ${data.companyName || "Company"}`, data.companyName);
};

const createPowerOfAttorneyDoc = (data: any): Document => {
  const titleText = data.poaType
      ? data.poaType.replace(/([A-Z])/g, ' $1').replace(/^./, (str: string) => str.toUpperCase()).trim()
      : "POWER OF ATTORNEY";

  const childrenContent = [
      new Paragraph({ text: titleText, heading: HeadingLevel.HEADING_1, alignment: AlignmentType.CENTER, spacing: { after: 300 }}),
      createTextParagraph("BE IT KNOWN, that this Power of Attorney is made on this date: " + (data.poaEffectiveDate || "[Effective Date]")),
      new Paragraph({text: ""}),

      createSectionHeader('1. Appointment of Principal'),
      createKeyValue('Full Legal Name of Principal (Grantor)', data.principalFullName),
      createKeyValue('Permanent Address of Principal', data.principalAddress, true),
      createKeyValue("Principal's Date of Birth", data.principalDob),
      createKeyValue("Principal's Identification (PAN/SSN/ID)", data.principalPan),

      createSectionHeader('2. Appointment of Attorney-in-Fact (Agent)'),
      createTextParagraph(`I, ${data.principalFullName || "[Principal Name]"}, the Principal, hereby appoint:`),
      createKeyValue('Full Legal Name of Agent (Grantee)', data.agentFullName),
      createKeyValue('Permanent Address of Agent', data.agentAddress, true),
      createKeyValue("Agent's Identification (PAN/SSN/ID)", data.agentPan),
      createKeyValue("Agent's Relationship to Principal", data.agentRelationshipToPrincipal),
      createTextParagraph(`as my true and lawful attorney-in-fact ("Agent") to act in my name, place, and stead.`),

      createSectionHeader('3. Scope of Authority Granted'),
      createTextParagraph('My Agent shall have the full power and authority to perform every act necessary or proper to be done in the exercise of any of the following powers as fully as I might or could do if personally present, with full power of substitution and revocation:'),
      createTextParagraph(data.specificPowersGranted), // This should be a detailed list

      createSectionHeader('4. Limitations on Powers (If Any)'),
      createTextParagraph(data.limitationsOnPowers || "No specific limitations beyond those implied by law or stated herein."),

      createSectionHeader('5. Duration and Revocation'),
      createTextParagraph(data.durationOfPoa),
      data.poaType === 'durable' || data.poaType === 'durablePowerOfAttorney' ? createTextParagraph("This Power of Attorney shall not be affected by my subsequent disability or incapacity, or lapse of time.") : null,

      createSectionHeader('6. Governing Law and Jurisdiction'),
      createKeyValue('Governing Law', data.governingLawAndJurisdiction),

      createSectionHeader('7. Witnesses (If Applicable/Required)'),
      data.witness1FullName ? createTextParagraph(`Witness 1: ${data.witness1FullName}, residing at ${data.witness1Address || "[Address]"}`) : null,
      data.witness2FullName ? createTextParagraph(`Witness 2: ${data.witness2FullName}, residing at ${data.witness2Address || "[Address]"}`) : null,
      (!data.witness1FullName && !data.witness2FullName) ? createTextParagraph("No witnesses specified in this generated document. Please ensure compliance with local witness requirements.") : null,

      new Paragraph({ text: "\nIN WITNESS WHEREOF, I have hereunto set my hand and seal on the effective date first above written.", spacing: {before: 400}}),

  ];
  const children = childrenContent.filter(el => el !== null) as Paragraph[];
  children.push(...createSignatureBlock("Principal's Signature", data.principalFullName));
  children.push(...createSignatureBlock("Agent's Signature (Acceptance)", data.agentFullName));
  if (data.witness1FullName) children.push(...createSignatureBlock("Witness 1 Signature", data.witness1FullName));
  if (data.witness2FullName) children.push(...createSignatureBlock("Witness 2 Signature", data.witness2FullName));
  
  children.push(new Paragraph({text: "\n\nNOTARY ACKNOWLEDGEMENT (If Required)", heading: HeadingLevel.HEADING_3, spacing: {before: 400}}));
  const para = createTextParagraph("State of _______________\nCounty of _______________\n\nOn this ____ day of ___________, 20__, before me, the undersigned Notary Public, personally appeared _________________________ (Principal), _________________________ (Agent), and _________________________ (Witness(es)), personally known to me or proved to me on the basis of satisfactory evidence to be the individual(s) whose name(s) is/are subscribed to the within instrument and acknowledged to me that he/she/they executed the same in his/her/their capacity(ies), and that by his/her/their signature(s) on the instrument, the individual(s), or the person upon behalf of which the individual(s) acted, executed the instrument.\n\n_____________________________\nNotary Public Signature\nMy Commission Expires: _______________");
  if (para) children.push(para);

  return createDocumentWithSetup(children, `Power of Attorney - ${data.principalFullName || "Principal"}`, data.principalFullName || data.companyName);
};

const createWebsiteServicesAgreementDoc = (data: any): Document => {
  const children = [
      new Paragraph({ text: `WEBSITE SERVICES AGREEMENT`, heading: HeadingLevel.HEADING_1, alignment: AlignmentType.CENTER, spacing: { after: 300 }}),
      createKeyValue('Agreement Date', data.agreementDate),
      createKeyValue('Project Name/Title', data.projectName),
      new Paragraph({text: ""}),

      createSectionHeader('1. Parties'),
      createTextParagraph('This Website Services Agreement (the "Agreement") is entered into by and between:'),
      createKeyValue('Service Provider (Developer/Agency)', `${data.serviceProviderCompanyName || "[Provider Name]"}`),
      createTextParagraph(`   Address: ${data.serviceProviderAddress || "[Provider Address]"}`), // Consider if these should be key-value or part of a more complex structure
      createTextParagraph(`   Contact: ${data.serviceProviderContactPerson || "[Contact Person]"} (${data.serviceProviderEmail || "[Email]"}${data.serviceProviderPhone ? `, ${data.serviceProviderPhone}` : ''})`),
      new Paragraph({text: ""}),
      createKeyValue('Client', `${data.clientCompanyName || "[Client Name]"}`),
      createTextParagraph(`   Address: ${data.clientAddress || "[Client Address]"}`),
      createTextParagraph(`   Contact: ${data.clientContactPerson || "[Contact Person]"} (${data.clientEmail || "[Email]"}${data.clientPhone ? `, ${data.clientPhone}` : ''})`),
      new Paragraph({text: ""}),

      createSectionHeader('2. Scope of Services and Deliverables'),
      createKeyValue('Description of Website Project', data.websiteDescription, true),
      createKeyValue('Services Included', data.servicesIncluded, true),
      createKeyValue('Specific Deliverables', data.specificDeliverables, true),

      createSectionHeader('3. Timeline'),
      createKeyValue('Project Start Date', data.projectStartDate),
      createKeyValue('Estimated Project Completion Date/Duration', data.projectCompletionDate),
      data.milestones ? createKeyValue('Key Project Milestones', data.milestones, true) : null,

      createSectionHeader('4. Payment Terms'),
      createKeyValue('Total Project Cost (or Rate)', data.totalProjectCost),
      createKeyValue('Payment Schedule', data.paymentSchedule, true),
      createKeyValue('Late Payment Terms', data.latePaymentTerms),
      createKeyValue('Handling of Additional Expenses', data.additionalExpenses, true),

      createSectionHeader('5. Intellectual Property and Rights'),
      createTextParagraph(data.intellectualPropertyOwnership),

      createSectionHeader('6. Confidentiality'),
      createTextParagraph(data.confidentialityClause),

      createSectionHeader('7. Agreement Term'),
      createTextParagraph(data.agreementTerm),

      createSectionHeader('8. Termination'),
      createKeyValue('Termination Conditions', data.terminationConditions, true),
      createKeyValue('Termination Notice Period', data.terminationNoticePeriod),

      createSectionHeader('9. Dispute Resolution and Governing Law'),
      createKeyValue('Dispute Resolution Method', data.disputeResolutionMethod, true),
      createKeyValue('Governing Law and Jurisdiction', data.governingLawAndJurisdiction),

      createSectionHeader('10. Entire Agreement'),
      createTextParagraph("This Agreement constitutes the entire agreement between the parties with respect to the subject matter hereof and supersedes all prior discussions, negotiations, and agreements, whether oral or written."),

      createSectionHeader('11. Agreement Effective Date'),
      createKeyValue('This Agreement becomes effective on', data.agreementEffectiveDate),

  ].filter(el => el !== null) as Paragraph[];
  children.push(new Paragraph({text: "\n\nIN WITNESS WHEREOF, the parties have executed this Agreement as of the Agreement Date first written above.", spacing: {before: 400}}));
  children.push(...createSignatureBlock("Service Provider Representative", data.serviceProviderCompanyName));
  children.push(...createSignatureBlock("Client Representative", data.clientCompanyName));
  return createDocumentWithSetup(children, `Website Services Agreement - ${data.projectName || "Project"}`, data.serviceProviderCompanyName);
};

// Generic document creator for unsupported types
const createGenericDoc = (data: any, docType: string): Document => {
  const children = [
      new Paragraph({
          text: docType.split(/(?=[A-Z])/).join(' ').toUpperCase(), // Converts camelCase to ALL CAPS TITLE
          heading: HeadingLevel.HEADING_1,
          alignment: AlignmentType.CENTER,
          spacing: { after: 300 }
      }),
      createTextParagraph(`This is a generic document for ${docType}.`),
      createTextParagraph('Generated by LegallyUp.')
  ].filter(el => el !== null) as Paragraph[];
  
  return createDocumentWithSetup(children, docType, data.companyName || 'LegallyUp');
};

// Main generateDocx function
export const generateDocx = async (data: any, fileName: string, documentTypeKey: string): Promise<void> => {
  try {
      if (!documentTypeKey) {
          throw new Error('Document type is required');
      }

      let doc: Document;

      switch (documentTypeKey) {
          case 'privacyPolicy':
              doc = createPrivacyPolicyDoc(data);
              break;
          case 'nda':
              doc = createNdaDoc(data);
              break;
          case 'eula':
              doc = createEulaDoc(data);
              break;
          case 'cookiesPolicy':
              doc = createCookiesPolicyDoc(data);
              break;
          case 'refundPolicy':
              doc = createRefundPolicyDoc(data);
              break;
          case 'powerOfAttorney':
              doc = createPowerOfAttorneyDoc(data);
              break;
          case 'websiteServicesAgreement':
              doc = createWebsiteServicesAgreementDoc(data);
              break;
          default:
              console.warn(`DOCX template for type "${documentTypeKey}" is not specifically implemented. Using generic template.`);
              doc = createGenericDoc(data, documentTypeKey);
      }

      const blob = await Packer.toBlob(doc);
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = fileName.endsWith('.docx') ? fileName : `${fileName}.docx`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
  } catch (error) {
      console.error("Error generating DOCX:", error);
      // Depending on your error handling strategy, you might want to re-throw or handle it differently
      throw error; 
  }
};